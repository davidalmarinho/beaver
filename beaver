create_first_premake_file() {
    echo 'workspace "Workspace"'> premake5.lua
    echo -e '    architecture "x64"\n'>> premake5.lua
    echo '    configurations {'>> premake5.lua
    echo '        "Release",'>> premake5.lua
    echo '        "Debug"'>> premake5.lua
    echo -e '    }\n'>> premake5.lua
    echo -e '    startproject "ProjectFolder"\n'>> premake5.lua
    echo 'outputdir = "%{cfg.buildcfg}-%{cfg.system}-%{cfg.architecture}"'>> premake5.lua
    echo -e '--ex.: {Debug}{Windows}{x64}\n'>> premake5.lua
    echo "-- Look for premake5.lua file of the project">> premake5.lua
    echo -e 'include "ProjectFolder"\n'>> premake5.lua
    echo "newaction {">> premake5.lua
    echo '    trigger = "clean",'>> premake5.lua
    echo '    description = "Remove all binaries and intermediate binaries, and vs files.",'>> premake5.lua
    echo '    execute = function()'>> premake5.lua
    echo '        print("Removing binaries")'>> premake5.lua
    echo '        os.rmdir("./bin")'>> premake5.lua
    echo '        print("Removing intermediate binaries")'>> premake5.lua
    echo '        os.rmdir("./bin-int")'>> premake5.lua
    echo '        print("Removing project files")'>> premake5.lua
    echo '        os.rmdir("./.vs")'>> premake5.lua
    echo '        os.remove("**.sln")'>> premake5.lua
    echo '        os.remove("**.vcxproj")'>> premake5.lua
    echo '        os.remove("**.vcxproj.filters")'>> premake5.lua
    echo '        os.remove("**.vcxproj.user")'>> premake5.lua
    echo '        os.remove("**.vcxproj")'>> premake5.lua
    echo '        os.remove("**.vcproj")'>> premake5.lua
    echo '        os.remove("**.project")'>> premake5.lua
    echo '        os.remove("**Makefile")'>> premake5.lua
    echo -e '        os.remove("*.workspace")\n'>> premake5.lua
    echo '        workspace_dir_name = os.matchdirs("*.xcworkspace")' >> premake5.lua
    echo '        -- This will return a list, where the index number 1 stores the name of the folder' >> premake5.lua
    echo '        if workspace_dir_name[1] ~= nil then' >> premake5.lua
    echo '            os.rmdir(workspace_dir_name[1])' >> premake5.lua
    echo -e '        end\n' >> premake5.lua
    echo '        xcodeproj_name = os.matchdirs("ProjectFolder/*.xcodeproj")' >> premake5.lua
    echo '        if xcodeproj_name[1] ~= nil then' >> premake5.lua
    echo '            os.rmdir(xcodeproj_name[1])' >> premake5.lua
    echo '        end' >> premake5.lua
    echo '        print("Clean up done.")'>> premake5.lua
    echo '    end'>> premake5.lua
    echo -e '}\n'>> premake5.lua
    echo "newaction {">> premake5.lua
    echo '    trigger = "compile_every_way",'>> premake5.lua
    echo '    description = "Created for debug purposes.",'>> premake5.lua
    echo '    execute = function()'>> premake5.lua
    echo '        os.execute("./vendor/premake5 codelite")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 xcode4")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 gmake")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 gmake2")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 vs2005")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 vs2008")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 vs2010")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 vs2012")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 vs2013")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 vs2015")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 vs2017")'>> premake5.lua
    echo '        os.execute("./vendor/premake5 vs2019")'>> premake5.lua
    echo '    end'>> premake5.lua
    echo -e '}\n'>> premake5.lua
    return
}

create_second_premake_file() {
    echo '-- Catch the current directory path' > premake5.lua
    echo 'handle = io.popen("pwd")' >> premake5.lua
    echo -e 'project_name = handle:read("*a")\n' >> premake5.lua
    echo '-- Remove the current folder "ProjectFolder" from our path' >> premake5.lua
    echo '-- ex.: ~/Documents/001_HelloWorld/ProjectFolder -> ~/Documents/001_HelloWorld/' >> premake5.lua
    echo 'tmp = ""' >> premake5.lua
    echo 'for p in string.gmatch(project_name, "%S+/") do' >> premake5.lua
    echo '    tmp = tmp .. p' >> premake5.lua
    echo -e 'end\n' >> premake5.lua
    echo '-- Removing the last "/"' >> premake5.lua
    echo '-- ex.: ~/Documents/001_HelloWorld/ -> ~/Documents/001_HelloWorld\n' >> premake5.lua
    echo -e 'project_name = string.sub(tmp, 1, -2)\n' >> premake5.lua
    echo '-- We will just stay with 001_HelloWorld' >> premake5.lua
    echo 'name_buffer = ""' >> premake5.lua
    echo '    while ( true ) do' >> premake5.lua
    echo '        -- Catch the index where we have the first slash' >> premake5.lua
    echo '        -- ex.: ~/Documents/001_HelloWorld - The index of the first slash is 1' >> premake5.lua
    echo '        slash_index = string.find(project_name, "/")' >> premake5.lua
    echo -e '        name_buffer = ""\n' >> premake5.lua
    echo '        -- When we will have no slashes, we also will have a null value in slash_index variable,' >> premake5.lua
    echo '        -- so we will break the while loop here' >> premake5.lua
    echo '        if slash_index == nil then' >> premake5.lua
    echo '            break' >> premake5.lua
    echo -e '        end\n' >> premake5.lua
    echo '        -- To remove the all content until we fint the first slash' >> premake5.lua
    echo '        for i = slash_index + 1, string.len(project_name) do' >> premake5.lua
    echo '            name_buffer = name_buffer .. string.sub(project_name, i, i)' >> premake5.lua
    echo '        end' >> premake5.lua
    echo '        project_name = name_buffer' >> premake5.lua
    echo -e '    end\n' >> premake5.lua
    echo 'project (project_name)'>> premake5.lua
    echo '    kind "ConsoleApp"'>> premake5.lua
    echo '    language "C++"'>> premake5.lua
    echo '    cppdialect "C++17" -- cpp 2017 version'>> premake5.lua
    echo '    -- In case of importing libraries'>> premake5.lua
    echo -e '    staticruntime "on"\n'>> premake5.lua
    echo '    targetdir("../bin/" .. outputdir .. "/%{prj.name}") -- Inside the current directory. '..' is contenation in Lua--'>> premake5.lua
    echo -e '    objdir("../bin-int/" .. outputdir .. "/%{prj.name}")\n'>> premake5.lua
    echo '    files {'>> premake5.lua
    echo '        "cpp/**.cpp", -- Look for .cpp file in subdirectories'>> premake5.lua
    echo '        "include/**.h"'>> premake5.lua
    echo '        -- "include/**.hpp"'>> premake5.lua
    echo -e '    }\n'>> premake5.lua
    echo '    includedirs {'>> premake5.lua
    echo '        "include"'>> premake5.lua
    echo -e '    }\n'>> premake5.lua
    echo '    defines {'>> premake5.lua
    echo '        "LINUX"'>> premake5.lua
    echo -e '    }\n'>> premake5.lua
    echo '    filter { "configurations:Debug" }'>> premake5.lua
#    echo '        buildoptions "/MTd"' -- d is just for debug>> premake5.lua
    echo '        runtime "Debug"'>> premake5.lua
    echo -e '        symbols "on" -- To generate debug symbols\n'>> premake5.lua
    echo '    filter { "configurations:Release" }'>> premake5.lua
#    echo '        buildoptions "/MT"' >> premake5.lua
    echo '        runtime "Release"'>> premake5.lua
    echo '        optimize "on"'>> premake5.lua
}

create_cpp_main_file() {
    type nul > main.cpp
    echo -e '#include "programInfo.h"\n' >> main.cpp
    echo -e "#include <iostream>\n" >> main.cpp
    # echo -e "\n" >> main.cpp 
    # echo -e "\n" makes a paragraph
    echo -e "int main(int argc, char *argv[]) {" >> main.cpp
    echo '   // Enable arguments for our program' >> main.cpp
    echo -e '   programInform::showInfo(argc, argv);\n' >> main.cpp
    echo -e '   std::cout << "Hello World!" << std::endl;\n' >> main.cpp
    echo "   return 0;" >> main.cpp
    echo "}">> main.cpp
    # ">" writes and deletes/creates, ">>" update the file

    # Create programInfo.cpp file
    echo -e "#include<iostream>" > programInfo.cpp
    echo -e "#include<string.h>\n" >> programInfo.cpp
    echo -e '#include "programInfo.h"\n' >> programInfo.cpp
    echo -e 'namespace programInform {' >> programInfo.cpp
    echo -e '   void showInfo(int argc, char *argv[]) {' >> programInfo.cpp
    echo -e "       // If we don't have arguments" >> programInfo.cpp
    echo -e '       if (argc == 1) return;\n' >> programInfo.cpp
    echo -e '       if (strcmp("--version", argv[1]) == 0) {' >> programInfo.cpp
    echo -e '           std::cout << "v0.0.1" << std::endl;' >> programInfo.cpp
    echo -e '       } else if (strcmp("--name", argv[1]) == 0) {' >> programInfo.cpp
    echo -e '           std::cout << argv[0] << std::endl;' >> programInfo.cpp
    echo -e '       } else if (strcmp("--help", argv[1]) == 0) {' >> programInfo.cpp
    echo -e '           std::cout << "Available arguments:" << std::endl;' >> programInfo.cpp
    echo -e '           std::cout << "--name Tell you the name of the program" << std::endl;' >> programInfo.cpp
    echo -e '           std::cout << "--version Provides you information about the program" << std::endl;' >> programInfo.cpp
    echo -e '       } else {' >> programInfo.cpp
    echo -e '           std::cout << "Argument not recognised. Type --help for more informations." << std::endl;' >> programInfo.cpp
    echo -e '       }\n' >> programInfo.cpp
    echo -e '       // Warn the user that our program only can take one argument' >> programInfo.cpp
    echo -e '       if (argc > 2) {' >> programInfo.cpp
    echo -e '           std::cout << "This program should have only one argument. Type --help for more informations." << std::endl;' >> programInfo.cpp
    echo -e '       }\n' >> programInfo.cpp
    echo -e '       exit(0);' >> programInfo.cpp
    echo -e '   }\n' >> programInfo.cpp
    echo -e '}' >> programInfo.cpp
}

create_header_file() {
    type nul > programInfo.h
    echo -e '#ifndef PROGRAM_INFO_27072021_H' >> programInfo.h
    echo -e '#define PROGRAM_INFO_27072021_H\n' >> programInfo.h
    echo -e 'namespace programInform {' >> programInfo.h
    echo -e '   // argc -> Number of arguments' >> programInfo.h    
    echo -e '   // argv[0] -> Name of the program' >> programInfo.h
    echo -e '   // argv[1] -> First argument' >> programInfo.h
    echo -e '   void showInfo(int argc, char *argv[]);\n' >> programInfo.h
    echo -e '} // namespace programInform\n' >> programInfo.h
    echo '#endif' >> programInfo.h
}

call_help() {
    echo -e "\n"
    echo -e "Enter 'beaver action' where action is one of the following:\n"
    echo    "create     Will create the resources needed to a new project into the current directory."
    echo    "compile    Will generate make file then compile using the make file."
    echo    "run        Will generate make file then compile using the make file then run the project."
    echo    "clean      Remove all binaries and intermediate binaries and project files."
    echo    "delete     Will delete all project files. Be careful."
    echo -e "\nType beaver --dam_blueprint for more information"
}

dam_blueprint() {
    echo -e "Enter 'beaver arg1 arg2' according with:\n"
    echo    " => create (Will create the resources needed to a new project into the current directory if it is a empty directory):"
    echo -e "\ncreate -> arg1"
    echo    "projectName -> arg2"
    echo    "ex.: beaver create HelloWorld"
    echo    "- - - - - - - - - - - - - - - -"
    echo    " => run (Will run the program based on the operating system needs)."
    echo    "Works only if we are in the same folder which your project is:"
    echo -e "\nrun -> arg1"
    echo    "arg2 doesn't exist"
    echo    "ex.: beaver run"
    echo    "- - - - - - - - - - - - - - - -"
    echo    " => compile (We have some different ways to compile your program depending in your needs)."
    echo    "Works only if we are in the same folder which your project is:"
    echo -e "\ncompile -> arg1"
    echo    "arg2 can be"
    echo    "gmake             Generate GNU makefiles for Linux."
    echo    "gmake2            Generate GNU makefiles for Linux."
    echo    "vs2019            Generate Visual Studio 2019 project files."
    echo    "vs2017            Generate Visual Studio 2017 project files."
    echo    "vs2015            Generate Visual Studio 2015 project files."
    echo    "vs2013            Generate Visual Studio 2013 project files."
    echo    "vs2012            Generate Visual Studio 2012 project files."
    echo    "vs2010            Generate Visual Studio 2010 project files."
    echo    "vs2008            Generate Visual Studio 2008 project files."
    echo    "vs2005            Generate Visual Studio 2005 project files."
    echo    "xcode4            Generate Apple Xcode 4 project files."
    echo    "codelite          Generate CodeLite project files."
    echo -e "\n For default (when arg2 doesn't exist, ex.: beaver compile) are ran the commads:"
    echo    "   ./vendor/premake5 gmake"
    echo    "   make"
    echo    " So, we will generate a make file to build our program."
    echo    "- - - - - - - - - - - - - - - -"
    echo    " => clean (Removes bin and bin-int folders and the files created during the compilation)."
    echo    "Works only if we are in the same folder which your project is:"
    echo -e "\nclean -> arg1"
    echo    "arg2 doesn't exist"
    echo    "ex.: beaver clean"
    echo    "- - - - - - - - - - - - - - - -"
    echo    " => delete (Deletes all project files. One more time, be careful.)"
    echo -e "\ndelete -> arg1"
    echo    "arg2 doesn't exist"
    echo -e "ex.: beaver delete"
    echo    "- - - - - - - - - - - - - - - -"
    echo    "And, if you're in the same folder your project is in, this is for the adventurers ;)"
    echo -e "\n./vendor/premake5 --help"
}

# If there is no arguments
if [ "$1" == "" ] || [ "$1" == "help" ]
then
    call_help

elif [ "$1" == "create" ]
then

    # Creates a folder if user input a name for it.
    # ex.: beaver create HelloWorld
    # Will create a folder named HelloWorld
    if [ ! -z "$2" ] # -z will test if the argument is a null string
    then    
        # Check if user input other argument, that creates an unvalid project
        if [ ! -z "$3" ]
        then
            echo "Error: Project shouldn't have a name with whitespaces"
            exit
        fi

        mkdir $2
        cd $2
    fi

    # If the direcoty isn't empty, don't create a new project
    if [ "$(ls)" ] 
    then
        echo 'Error: The folder is not empty.'
        exit
    fi

    # Create folders
    mkdir ProjectFolder
    mkdir vendor
    mkdir bin
    mkdir bin-int
    cd ProjectFolder
    mkdir include
    mkdir cpp

    # Create cpp main file
    cd cpp
    # Write cpp main code
    create_cpp_main_file

    # Go to include directory
    cd ..
    cd include
    create_header_file


    # Fallback to the folder of the main process
    cd ..
    cd ..

    # Create first lua file
    create_first_premake_file

    cd ProjectFolder

    # Create the second lua file
    create_second_premake_file

    cd ..

    # Download premake5.tar.gz and extrate it
    cd vendor
    wget "https://github.com/premake/premake-core/releases/download/v5.0.0-alpha16/premake-5.0.0-alpha16-linux.tar.gz"
    tar -xzvf premake-5.0.0-alpha16-linux.tar.gz
    rm -r premake-5.0.0-alpha16-linux.tar.gz
    
    echo -e '\nDone.'
    
    cd ..

elif [ "$1" == "delete" ]
then
    # Delete directories
    read -n 1 -p "Are your sure? This action will delete all your ptoject files [Y/N] -> " confirmation
    if [ "$confirmation" == "Y" ]; then
        ./vendor/premake5 clean
        echo 'Removing ProjectFolder...'
        rm -r ProjectFolder
        echo 'Removing premake5...'
        rm -r vendor
        rm premake5.lua
        echo 'The project has been deleted.'
    else
        echo -e "\nAborting..."
        echo "The project wasn't deleted."
    fi

elif [ "$1" == "compile" ]
then
    # If we have another argument, it means we are requesting for a more precise compilation
    if [ -z "$2" ] 
    then
        # Create makefile gmake
        ./vendor/premake5 gmake
        make
    else
        # Generate codelite compilation
        if [ "$2" == "codelite" ]
        then
            ./vendor/premake5 codelite

        # Generate makefile for linux
        elif [ "$2" == "gmake" ]
        then
            ./vendor/premake5 gmake

        # Generate makefile for linux
        elif [ "$2" == "gmake2" ]
        then
            ./vendor/premake5 gmake2

        # Generate visual studio project acording with the visual studio's version
        elif [ "$2" == "vs2005" ]
        then
            ./vendor/premake5 vs2005
        elif [ "$2" == "vs2008" ]
        then
            ./vendor/premake5 vs2008
        elif [ "$2" == "vs2010" ]
        then
            ./vendor/premake5 vs2010
        elif [ "$2" == "vs2012" ]
        then
            ./vendor/premake5 vs2012
        elif [ "$2" == "vs2013" ]
        then
            ./vendor/premake5 vs2013
        elif [ "$2" == "vs2015" ]
        then
            ./vendor/premake5 vs2015
        elif [ "$2" == "vs2017" ]
        then
            ./vendor/premake5 vs2017
        elif [ "$2" == "vs2019" ]
        then
            ./vendor/premake5 vs2019

        # Generate xcode4 for mac 
        elif [ "$2" == "xcode4" ]
        then
            ./vendor/premake5 xcode4
        fi
    fi    

elif [ "$1" == "run" ]
then
    # Create makefile gmake
    ./vendor/premake5 gmake
    make

    # Check if compilation was a success and exit if it's not
    # The return value is stored in $?
    if [ $? -ne 0 ]
    then
        echo "Compilation failed, aborting..."
        exit 
    fi
    # Run
    cd bin
    # Create a variable that will get the folder that has the word "...linux..." in its name
    var=$(find -name *linux*)
    ./$var/*/*
    cd ..

elif [ "$1" == "clean" ]
then
    ./vendor/premake5 clean

# A deeper help for user -- will show user all beaver's functionalities
elif [ "$1" == "--dam_blueprint" ]
then
    dam_blueprint

# If the argument doesn't exist, print help
else
    call_help
fi
exit
